/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTZ_BASE 1

#define TBLE_ORTHO   1
// #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define MEN_L 4
#define NEN_L 5

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,physical-layout =
#ifdef TBLE_DUAL_2U
                       &layout_ortho_4x12_2x2u;
#elif defined(TBLE_MIT)
                       &layout_ortho_4x12_1x2u;
#else
                       &layout_ortho_4x12_all1u;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L NAV_L>;
	    then-layer = <SYM_L>;
        };
    };
#endif

keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <

 &kp TAB    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         	&kp BKSP
 &kp ESC    &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp RA(LS(LEFT))     &kp RET
 &mo SYM_L  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      	&mo NEN_L
 &mo MEN_L  &kp LCTRL  &kp RALT  &kp LGUI    &mo NUM_L      &kp LSHIFT      &kp SPACE        &mo NAV_L      &kp UP    &kp DOWN     &kp LEFT      	&kp RIGHT

            >;
        };

  nav_layer {
            label = "Nav";
            bindings = <
&kp NUMBER_1  	&kp NUMBER_2     &kp NUMBER_3     &kp NUMBER_4      &kp NUMBER_5      &kp NUMBER_6     &kp NUMBER_7     &kp NUMBER_8	&kp NUMBER_9      &kp NUMBER_0     &kp MINUS     &kp LEFT_BRACKET 
&trans     	&trans     	 &trans     	  &trans     	    &trans            &trans           &trans           &trans       	&trans     	  &trans      	   &kp SEMICOLON   &kp SINGLE_QUOTE
&trans     	&trans   	 &trans  	  &trans    	    &trans            &trans	       &trans           &trans       	&trans   	  &trans   	   &kp UP    	 &trans
&trans  	&trans 		 &trans     	  &trans      	    &trans            &trans           &trans    	&trans  	&trans        	  &kp LEFT 	   &kp DOWN 	 &kp RIGHT
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)   &kp LS(NUMBER_3)    &kp LS(NUMBER_4)      &kp LS(NUMBER_5)          &kp LS(NUMBER_6)   &kp LS(NUMBER_7)     &kp LS(NUMBER_8)   &kp LS(NUMBER_9)         &kp LS(NUMBER_0)             &kp LS(MINUS)           &kp EQUAL 
&kp GRAVE    	  &kp RA(NUMBER_8)   &kp RA(NUMBER_9)    &kp NON_US_BACKSLASH  &kp LS(NON_US_BACKSLASH)  &kp RA(NUMBER_7)   &kp RA(NUMBER_0)     &kp LS(BACKSLASH)  &kp RA(RIGHT_BRACKET)    &kp RA(NON_US_BACKSLASH)  &kp LS(RIGHT_BRACKET)     &kp RIGHT_BRACKET
&trans     	  &trans   	     &trans  	         &trans    	       &trans       	         &trans	            &trans               &trans       	    &trans   	             &trans   	                 &trans     	         &kp NON_US_HASH  
&trans  	  &trans 	     &kp LALT      	 &trans      	       &trans                    &trans             &trans    	         &trans  	    &trans        	     &trans 		         &trans 		 &trans
            >; 
        };  

         sym_layer {
            label = "Sym";
            bindings = <
&trans          &trans          &trans          &trans          &trans          &trans       &kp C_PREV     &kp C_PLAY_PAUSE    &kp C_NEXT       &kp C_MUTE        &kp C_VOLUME_DOWN     &kp C_VOLUME_UP
&kp F1     	&kp F2     	&kp F3     	&kp F4     	&kp F5          &kp F6       &kp F7         &kp F8       	&kp F9     	    &kp F10           &kp F11   	    &kp F12
&trans     	&trans   	&trans  	&trans    	&trans       	&trans	     &trans         &trans       	&trans   	    &trans   	      &trans    	    &trans
&bt BT_CLR  	&bt BT(0)  	&bt BT(1)  	&bt BT(2)   	&bt BT(3)       &bt BT(4)    &trans          &trans             &trans              &trans            &trans 	             &trans 		   
            >;
        };

 men_layer {
            label = "Men";
            bindings = <
&kp LS(W)	    &kp I        &kp NUMBER_1     &kp LS(V)    &kp W       &trans       &trans    	&trans     	 &kp NUMBER_7       &kp NUMBER_8        &kp NUMBER_9     	&kp KP_PLUS
&kp LS(NUMBER_6)    &kp LA(L)    &kp NUMBER_2     &kp LS(F)    &kp H       &trans       &trans    	&trans     	 &kp NUMBER_4       &kp NUMBER_5        &kp NUMBER_6     	&kp KP_MINUS
&trans	            &trans       &trans 	  &trans       &trans      &trans       &trans     	&trans           &kp NUMBER_1       &kp NUMBER_2        &kp NUMBER_3     	&kp KP_ASTERISK
&trans	            &trans       &trans           &trans       &trans      &trans       &trans          &kp KP_EQUAL     &kp KP_COMMA  	    &kp NUMBER_0        &kp KP_DOT       	&kp KP_DIVIDE
            >;
        };
 

nen_layer {
            label = "Nen";
            bindings = <
&kp LG(NUMBER_1)  	&kp LG(NUMBER_2)     	&kp LG(NUMBER_3)     	&kp LG(NUMBER_4)      	&trans          &trans       &trans     &trans		&trans      	&trans     	&trans     	&trans 
&kp LG(NUMBER_5)     	&kp LG(NUMBER_6)     	&kp LG(NUMBER_7)    	&kp LG(NUMBER_8)     	&trans          &trans       &trans     &trans       	&trans     	&trans      	&trans   	&trans
&trans     	        &trans   	        &trans  	        &trans    	        &trans       	&trans	     &trans     &trans       	&trans   	&trans   	&trans    	&trans
&trans  	        &trans 		        &trans     	        &trans           	&trans          &trans       &trans    	&trans  	&trans        	&trans 		&trans 		&trans
            >;
        };


    };
};

